#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define INITIAL_STACK_SIZE (8)
#define GROWTH_FACTOR (2)

struct stack{
  int count;
  int length;
  int startIdx;
  int *values;
};

typedef struct stack Stack;

Stack * 
StackCreate(void){
  Stack *s = malloc(sizeof(Stack));
  assert(s);
  
  s->count = 0;
  s->length = INITIAL_STACK_SIZE;
  s->values = malloc(INITIAL_STACK_SIZE * sizeof(int));
  assert(s->values);

  return s;
}

void StackGrow(Stack *s)
{
  //  printf("Doubling stack size...\n");
  s->values = (int *) realloc(s->values, s->length * GROWTH_FACTOR * sizeof(int));

  s->length *= GROWTH_FACTOR;
}

void StackPush(Stack *s, int value){
  s->values[s->count] = value;
  s->count++;
  if(s->count >= s->length) StackGrow(s);
}


int StackPop(Stack *s){
  int retVal = s->values[s->startIdx++];
  return retVal;
}

void StackDestroy(Stack *s)
{
  free(s->values);
  free(s);
}

void StackPrint(Stack *s){
  int i = s->count - 1;
  while(i >= s->startIdx) printf("%d ", s->values[i--]);
  
  putchar('\n');
}

int main(int argc, char**argv)
{
  Stack *s = StackCreate();

  for(int i = 0; i < 5; i++){
    printf("Push %d\n", i);
    StackPush(s, i);
    StackPrint(s);
  }

  for(int j = 0; j < 5; j++){
    printf("Pop %d\n", StackPop(s));
    StackPrint(s);
  }

  return 0;
}


